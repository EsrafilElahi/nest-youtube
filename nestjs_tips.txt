
// * ---> if you use the service => import it in providers[]
// * ---> if you use the module => import it in imports[]

forRoot / forRootAsync: configure a module one time. This is either for a global service, or a re-used configuration internally
forFeature / forFeatureAsync: make use of the configuration from forRoot/forRootAsync for a specific provider. This usually creates an injection token.
register / registerAsync: a module that can be registered multiple times with different configurations each time.

// use this to hanlde errors
// throw new HttpException(
//   'An account with that email already exists!',
//   HttpStatus.CONFLICT,
// );

// exports: [UserService], ---> must be export to use it into other modules directly
// or put UserService to Providers array where you want use

// specify module, every module like products ---> TypeOrmModule.forFeature([Product, BoughtProducts]),
// all of modules try this too ---> entities: [User, Product, UserLikes, BoughtProducts],

// ___ custom decorator ___ ---> for get userId doesn't need to pass userId from frontend
// import { ExecutionContext } from "@nestjs/common";
// import { createParamDecorator } from "@nestjs/common/decorators"
// import { User } from "src/database/entities/user/user.entity"

// export const ExtractUser = createParamDecorator((data, ctx: ExecutionContext) : User => {
//     const req = ctx.switchToHttp().getRequest();
//     return req.user;
// });

// custom exception
// import { Injectable, NotFoundException } from '@nestjs/common';
// import { User } from '@prisma/client';

// @Injectable()
// export class UserException {
//   public userNotFound(user: User) {
//     if (!user) {
//       throw new NotFoundException('user not  found');
//     }
//   }
// }


// providers: [
//   AppService,
//   {
//     provide: APP_INTERCEPTOR,
//     // useClass: ClassSerializerInterceptor,
//     useClass: UserInterceptor,
//   },
//   {
//     provide: APP_GUARD,
//     useClass: AuthGuard,
//   },
// ],



{
    "firstName":"karzar44",
    "lastName":"cunner44",
    "phone": "09106850027",
    "bio": "scrum dev",
    "address":"tehran",
    "job":"IT",
    "avatar": "avatar 2",
    "role": "user"
}